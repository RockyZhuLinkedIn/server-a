<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                                             xmlns:context="http://www.springframework.org/schema/context"
                                             xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
                                             default-lazy-init="true">

    <!-- This scan is only used to find the services component. -->
    <context:component-scan base-package="com.rockyzhu.myserver.rest.services" />

    <!--
      In web.xml, HttpRequestHandlerServlet loads this "restliRequestHandler" spring bean as a servlet.  For details, see:
      http://static.springsource.org/spring-framework/docs/3.2.0.RC1/api/org/springframework/web/context/support/HttpRequestHandlerServlet.html
    -->
    <bean id="restliRequestHandler" class="com.linkedin.restli.server.spring.RestliHttpRequestHandler">
        <constructor-arg>
            <bean class="com.linkedin.restli.server.RestLiConfig">
                <property name="resourcePackageNames" value="com.rockyzhu.myserver.rest.resources" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="injectResourceFactory" />
        <constructor-arg ref="filterChain" />
    </bean>

    <!-- An InjectResourceFactory must be created.  It is ApplicationContextAware so must be instantiated via spring and then passed into rest.li -->
    <bean id="injectResourceFactory" class="com.linkedin.restli.server.spring.SpringInjectResourceFactory" />

    <bean id="filterChain" class="com.linkedin.r2.filter.FilterChains" factory-method="createRestChain">
        <constructor-arg>
            <list>
                <ref bean="loggingFilter"/>
                <ref bean="compressionFilter"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- enable logging -->
    <bean id="loggingFilter" class="com.linkedin.r2.filter.logging.SimpleLoggingFilter" />

    <!-- enable snappy compression support -->
    <bean id="compressionFilter" class="com.linkedin.r2.filter.compression.ServerCompressionFilter" >
        <constructor-arg value="snappy" />
    </bean>

    <!-- oracle jdbc db -->
    <bean id="spiderReadDao" class="com.rockyzhu.myserver.oracle.db.SpiderReadDaoImpl">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="spiderWriteDao" class="com.rockyzhu.myserver.oracle.db.SpiderWriteDaoImpl">
        <constructor-arg ref="dataSource"/>
    </bean>

    <bean id="dataSource" class="com.rockyzhu.myserver.oracle.db.DataSourceFactory" factory-method="getDataSource">
        <constructor-arg name="allProperties" ref="allProperties"/>
    </bean>

    <bean id="kafkaStreams" class="com.rockyzhu.myserver.kafka.streams.KafkaStreamFactory" factory-method="getKafkaStreams">
        <constructor-arg name="allProperties" ref="allProperties"/>
    </bean>

    <bean id="allProperties" class="com.rockyzhu.myserver.config.PropertiesFactory" factory-method="getProperties">
        <!--property     name="relativePath" value="/config/application.properties"-->
        <constructor-arg name="relativePath" value="/config/application.properties" />
    </bean>
</beans>